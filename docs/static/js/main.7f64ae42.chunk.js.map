{"version":3,"sources":["App.tsx","index.tsx"],"names":["scratchSvg","document","createElementNS","setAttribute","body","appendChild","scratchPath","Path","this","props","d","bbox","getBBox","react_default","a","createElement","style","styles","imgWrapper","viewBox","concat","x","y","width","height","img","fill","stroke","PureComponent","App","state","data","generation","reactMarkup","imgs","paths","imgNames","pathNames","_pendingPathNames","_pendingImgNames","_sync","debounce","_this","setState","_changePath","i","val","Object","toConsumableArray","_changeImg","_handleChange","ev","_handleData","target","value","preventDefault","_handlePaste","clipboardData","getData","_this2","_this$state","page","autoFocus","onChange","onPaste","input","placeholder","output","key","length","images","map","path","imgBox","App_Path","defaultValue","name","href","onClick","link","download","filename","URL","createObjectURL","dataURI","binStr","atob","split","len","arr","Uint8Array","mimeString","charCodeAt","Blob","type","dataURIToBlob","click","removeChild","src","codeOutput","readOnly","root","DOMParser","parseFromString","children","nodeToString","el","imgsOut","pathsOut","attributes","attributeNames","getAttributeNames","reactName","replace","g","toUpperCase","getAttribute","startsWith","maybeFiletype","slice","match","filetype","push","forEach","pair","_pair$split","_pair$split2","slicedToArray","k","v","keys","sort","pathname","tagName","join","err","Component","position","left","top","minHeight","right","display","padding","flexDirection","fontFamily","columns","flex","fontSize","resize","overflow","objectSpread","marginBottom","flexWrap","border","maxWidth","maxHeight","marginRight","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.7f64ae42.chunk.js","sourcesContent":["import React, {PureComponent, Component, CSSProperties} from \"react\";\nimport debounce from \"lodash.debounce\";\n\ninterface State {\n    data: string;\n    generation: number;\n\n    reactMarkup: string;\n    imgs: Array<{filename: string; value: string}>;\n    paths: Array<{name: string; value: string}>;\n    imgNames: Array<string>;\n    pathNames: Array<string>;\n}\n\nconst scratchSvg = document.createElementNS(\n    \"http://www.w3.org/2000/svg\",\n    \"svg\",\n);\nscratchSvg.setAttribute(\n    \"style\",\n    \"position: absolute; top:0; left:0;pointer-events: none; width: 1px; height: 1px; opacity: 0\",\n);\ndocument.body.appendChild(scratchSvg);\n\nconst scratchPath = document.createElementNS(\n    \"http://www.w3.org/2000/svg\",\n    \"path\",\n);\nscratchSvg.appendChild(scratchPath);\n\nclass Path extends PureComponent<{d: string}> {\n    render() {\n        scratchPath.setAttribute(\"d\", this.props.d);\n        const bbox = scratchPath.getBBox();\n\n        return (\n            <div style={styles.imgWrapper}>\n                <svg\n                    viewBox={`${bbox.x} ${bbox.y} ${bbox.width} ${bbox.height}`}\n                    style={styles.img}\n                >\n                    <path\n                        style={{fill: \"none\", stroke: \"rebeccapurple\"}}\n                        d={this.props.d}\n                    />\n                </svg>\n            </div>\n        );\n    }\n}\n\nclass App extends Component<{}, State> {\n    state: State = {\n        data: \"\",\n        generation: 0,\n        reactMarkup: \"\",\n        imgs: [],\n        paths: [],\n        imgNames: [],\n        pathNames: [],\n    };\n\n    render() {\n        const {reactMarkup, paths, imgs, generation} = this.state;\n\n        return (\n            <div style={styles.page}>\n                <h1>Figma SVG to React SVG</h1>\n                <textarea\n                    autoFocus\n                    value=\"\"\n                    onChange={this._handleChange}\n                    onPaste={this._handlePaste}\n                    style={styles.input}\n                    placeholder=\"In Figma, right click and select 'Copy as SVG'. Paste the result here.\"\n                />\n                <div style={styles.output} key={generation}>\n                    <h2>Paths</h2>\n                    {!paths.length ? (\n                        <i>No paths over 20 characters</i>\n                    ) : (\n                        <i>\n                            You can rename path to make the output easier to\n                            manipulate in code. These changes will be reflected\n                            in the markup.\n                            <br />\n                            <br />\n                        </i>\n                    )}\n                    {paths.length > 0 && (\n                        <div style={styles.images}>\n                            {paths.map((path, i) => (\n                                <span key={i} style={styles.imgBox}>\n                                    <Path d={path.value} />\n                                    <input\n                                        defaultValue={path.name}\n                                        onChange={ev => {\n                                            this._changePath(\n                                                i,\n                                                ev.target.value,\n                                            );\n                                        }}\n                                    />\n                                </span>\n                            ))}\n                        </div>\n                    )}\n\n                    <h2>Images</h2>\n                    {!imgs.length ? (\n                        <i>No images</i>\n                    ) : (\n                        <i>\n                            You can rename images. These changes will be\n                            reflected in the markup, and in the default name of\n                            the image when you download it. Click on an image to\n                            download it.\n                            <br />\n                            <br />\n                        </i>\n                    )}\n                    {imgs.length > 0 && (\n                        <div style={styles.images}>\n                            {imgs.map((img, i) => (\n                                <span key={i} style={styles.imgBox}>\n                                    <a\n                                        href=\"javascript:void(0)\"\n                                        onClick={() => {\n                                            function dataURIToBlob(\n                                                dataURI: string,\n                                            ) {\n                                                var binStr = atob(\n                                                        dataURI.split(\",\")[1],\n                                                    ),\n                                                    len = binStr.length,\n                                                    arr = new Uint8Array(len),\n                                                    mimeString = dataURI\n                                                        .split(\",\")[0]\n                                                        .split(\":\")[1]\n                                                        .split(\";\")[0];\n\n                                                for (var i = 0; i < len; i++) {\n                                                    arr[i] = binStr.charCodeAt(\n                                                        i,\n                                                    );\n                                                }\n\n                                                return new Blob([arr], {\n                                                    type: mimeString,\n                                                });\n                                            }\n\n                                            const link = document.createElement(\n                                                \"a\",\n                                            );\n                                            document.body.appendChild(link);\n                                            link.download = img.filename;\n                                            link.href = URL.createObjectURL(\n                                                dataURIToBlob(img.value),\n                                            );\n                                            link.click();\n                                            document.body.removeChild(link);\n                                        }}\n                                    >\n                                        <div style={styles.imgWrapper}>\n                                            <img\n                                                style={styles.img}\n                                                src={img.value}\n                                            />\n                                        </div>\n                                    </a>\n                                    <input\n                                        defaultValue={img.filename}\n                                        onChange={ev => {\n                                            this._changeImg(i, ev.target.value);\n                                        }}\n                                    />\n                                </span>\n                            ))}\n                        </div>\n                    )}\n\n                    <h2>Markup</h2>\n                    <textarea\n                        value={reactMarkup}\n                        style={styles.codeOutput}\n                        readOnly\n                        placeholder=\"React markup with show up here.\"\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    _pendingPathNames: Array<string> | null = null;\n    _pendingImgNames: Array<string> | null = null;\n\n    _sync = debounce(() => {\n        if (this._pendingPathNames) {\n            this.setState({\n                pathNames: this._pendingPathNames,\n            });\n        }\n\n        if (this._pendingImgNames) {\n            this.setState({\n                imgNames: this._pendingImgNames,\n            });\n        }\n\n        this._pendingPathNames = null;\n        this._pendingImgNames = null;\n    }, 500);\n\n    _changePath = (i: number, val: string) => {\n        const pathNames = this._pendingPathNames || this.state.pathNames;\n        this._pendingPathNames = [...pathNames];\n        this._pendingPathNames[i] = val;\n        this._sync();\n    };\n\n    _changeImg = debounce((i: number, val: string) => {\n        const imgNames = this._pendingImgNames || this.state.imgNames;\n        this._pendingImgNames = [...imgNames];\n        this._pendingImgNames[i] = val;\n        this._sync();\n    }, 500);\n\n    _handleChange = (ev: React.ChangeEvent<HTMLTextAreaElement>) => {\n        this._handleData(ev.target.value);\n        ev.preventDefault();\n    };\n    _handlePaste = (ev: React.ClipboardEvent<HTMLTextAreaElement>) => {\n        this._handleData(ev.clipboardData.getData(\"text\"));\n        ev.preventDefault();\n    };\n    _handleData = (data: string) => {\n        this.setState({data, generation: this.state.generation + 1});\n    };\n\n    static getDerivedStateFromProps(props: {}, state: State): Partial<State> {\n        const {data, pathNames, imgNames} = state;\n        if (!data) {\n            return {\n                reactMarkup: \"\",\n                imgs: [],\n                paths: [],\n            };\n        }\n\n        function nodeToString(\n            el: Element,\n            imgsOut: Array<{filename: string; value: string}>,\n            pathsOut: Array<{name: string; value: string}>,\n        ): string {\n            let attributes: {[key: string]: string} = {};\n            let attributeNames = el.getAttributeNames();\n            for (let i = 0; i < attributeNames.length; ++i) {\n                let reactName = attributeNames[i].replace(/[-:]([a-z])/g, g =>\n                    g[1].toUpperCase(),\n                );\n                let value = el.getAttribute(attributeNames[i]);\n\n                if (\n                    reactName === \"xlinkHref\" &&\n                    value &&\n                    value.startsWith(\"data:\")\n                ) {\n                    const maybeFiletype = value\n                        .slice(0, 100)\n                        .match(/^data:image\\/([^;]+)/);\n                    const filetype = maybeFiletype\n                        ? `.${maybeFiletype[1]}`\n                        : \"\";\n                    const filename =\n                        imgNames[imgsOut.length] ||\n                        `image${imgsOut.length}${filetype}`;\n                    attributes[reactName] = `\"${filename}\"`;\n                    attributes[\"href\"] = `\"${filename}\"`;\n                    imgsOut.push({\n                        filename,\n                        value,\n                    });\n                } else if (reactName === \"style\" && value) {\n                    let style: {[key: string]: string} = {};\n                    value.split(\";\").forEach(pair => {\n                        const [k, v] = pair.split(\":\");\n                        style[\n                            k.replace(/-([a-z])/g, g => g[1].toUpperCase())\n                        ] = v;\n                    });\n                    attributes[reactName] = `{{${Object.keys(style)\n                        .sort()\n                        .map(key => `${key}: \"${style[key]}\"`)}}}`;\n                } else if (reactName === \"d\" && value && value.length > 20) {\n                    const pathname =\n                        pathNames[pathsOut.length] || `PATH_${pathsOut.length}`;\n                    pathsOut.push({name: pathname, value});\n                    attributes[reactName] = `{${pathname}}`;\n                } else if (reactName === \"maskType\") {\n                    attributes[\"mask-type\"] = `\"${value}\"`;\n                } else if (value) {\n                    attributes[reactName] = `\"${value}\"`;\n                }\n            }\n\n            let children = \"\";\n\n            for (let i = 0; i < el.children.length; ++i) {\n                children += nodeToString(el.children[i], imgsOut, pathsOut);\n            }\n\n            return `<${[\n                el.tagName,\n                ...Object.keys(attributes)\n                    .sort()\n                    .map(a => `${a}=${attributes[a]}`),\n            ].join(\" \")}>${children}</${el.tagName}>`;\n        }\n\n        try {\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(data, \"text/xml\");\n            const root = doc.children[0];\n            const imgs: Array<{filename: string; value: string}> = [];\n            const paths: Array<{name: string; value: string}> = [];\n            let reactMarkup = nodeToString(root, imgs, paths);\n\n            if (paths.length) {\n                let markupLines = paths.map(\n                    path => `const ${path.name} = \"${path.value}\";`,\n                );\n\n                reactMarkup =\n                    markupLines.join(\"\\n\") + \"\\n\\n// ...\\n\\n\" + reactMarkup;\n            }\n\n            return {\n                reactMarkup,\n                imgs,\n                paths,\n            };\n        } catch (err) {\n            return {\n                reactMarkup: \"Could not generate markup.\",\n                imgs: [],\n                paths: [],\n            };\n        }\n    }\n}\n\nconst code: CSSProperties = {\n    fontSize: 14,\n    fontFamily:\n        \"Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace\",\n};\n\nconst styles = {\n    page: {\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        minHeight: \"calc(100vh - 24px)\",\n        right: 0,\n        display: \"flex\",\n        padding: 12,\n        flexDirection: \"column\",\n        fontFamily: \"Helvetica Neue, Helvetica, Arial, sans-serif\",\n    } as CSSProperties,\n    columns: {\n        display: \"flex\",\n        flex: 1,\n    } as CSSProperties,\n    input: {\n        fontSize: 16,\n        padding: 12,\n        height: 20,\n        minHeight: 20,\n        resize: \"none\",\n        overflow: \"hidden\",\n        fontFamily: \"Helvetica Neue, Helvetica, Arial, sans-serif\",\n    } as CSSProperties,\n    output: {\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        resize: \"none\",\n    } as CSSProperties,\n    codeOutput: {\n        ...code,\n        flex: 1,\n        minHeight: 300,\n        marginBottom: 16,\n    } as CSSProperties,\n    images: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n    } as CSSProperties,\n    imgBox: {\n        display: \"flex\",\n        flexDirection: \"column\",\n    } as CSSProperties,\n    imgWrapper: {\n        width: 200,\n        height: 200,\n        border: \"1px solid rebeccapurple\",\n    },\n    img: {\n        display: \"block\",\n        width: \"auto\",\n        height: \"auto\",\n        maxWidth: 200,\n        maxHeight: 200,\n        marginRight: 16,\n    } as CSSProperties,\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}